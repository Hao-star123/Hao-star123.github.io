<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>acm(测试方法)</title>
      <link href="/2023/02/24/acm%EF%BC%88%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%EF%BC%89/"/>
      <url>/2023/02/24/acm%EF%BC%88%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>注：本文根据《算法入门经典第（2）版》撰写</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于程序需要测试大量用例，手动输入较为麻烦。因此可以使用文件操作。一个好的方法是用文件——把输入数据保存在文件中，输出数据也保存在文件中。这样，只要事先把输入数据保存在文件中，就不必每次重新输入了；数据输出在文件中也避免了“输出太多，一卷屏前面的就看不见了”这样的尴尬，运行结束后，慢慢浏览输出文件即可。如果有标准答案文件，还可以进行文件比较，而无须编程人员逐个检查输出是否正确。事实上，几乎所有算法竞赛的输入数据和标准答案都是保存在文件中的。  </p></blockquote><p>示例中采用创建date.in文件存储输入，date.out存储输出。  </p><h2 id="一、文件重定向"><a href="#一、文件重定向" class="headerlink" title="一、文件重定向"></a>一、文件重定向</h2><p>使用文件最简单的方法是使用输入输出重定向，只需在 main 函数的入口处加入以下两条语句：</p><ul><li>freopen(“input.txt”, “r”, stdin); </li><li>freopen(“output.txt”, “w”, stdout);   </li></ul><p>上述语句将使得 scanf 从文件 input.txt 读入，printf 写入文件 output.txt。事实上，不只是 scanf 和 printf，所有读键盘输入、写屏幕输出的函数都将改用文件。尽管这样做很方便，并不是所有算法竞赛都允许用程序读写文件。甚至有的竞赛允许访问文件，但不允许用<br>freopen 这样的重定向方式读写文件。参赛之前请仔细阅读文件读写的相关规定。</p><p>利用文件是一种很好的自我测试方法，但如果比赛要求采用标准输入输出，就必须在自我测试完毕之后删除重定向语句。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOCAL </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1000000000 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL </span></span><br><span class="line"> freopen(<span class="string">&quot;data.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>); </span><br><span class="line"> freopen(<span class="string">&quot;data.out&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>); </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line"> <span class="type">int</span> x, n = <span class="number">0</span>, min = INF, max = -INF, s = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) == <span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line"> s += x; </span><br><span class="line"> <span class="keyword">if</span>(x &lt; min) min = x; </span><br><span class="line"> <span class="keyword">if</span>(x &gt; max) max = x; </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> printf(&quot;x = %d, min = %d, max = %d\n&quot;, x, min, max); </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"> n++; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d %d %.3f\n&quot;</span>, min, max, (<span class="type">double</span>)s/n); </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这是一份典型的比赛代码，包含了几个特殊之处：</p><ul><li>重定向的部分被写在了#ifdef 和#endif 中。其含义是：只有定义了符号 LOCAL，才编译两条 freopen 语句。</li><li>输出中间结果的 printf 语句写在了注释中——它在最后版本的程序中不应该出现，但是又舍不得删除它（万一发现了新的 bug，需要再次用它输出中间信息）。将其注释的好处是：一旦需要时，把注释符去掉即可。</li></ul><p>上面的代码在程序首部就定义了符号 LOCAL，因此在本机测试时使用重定向方式读写文件。如果比赛要求读写标准输入输出，只需在提交之前删除#define LOCAL 即可。一个更好的方法是在编译选项而不是程序里定义这个 LOCAL 符号（不知道如何在编译选项里定义符号的读者请参考附录 A），这样，提交之前不需要修改程序，进一步降低了出错的可能。<br>提示 ：在算法竞赛中，有经验的选手往往会使用条件编译指令并且将重要的测试语句注释掉而非删除。</p><h2 id="fopen版"><a href="#fopen版" class="headerlink" title="fopen版"></a>fopen版</h2><p>如果比赛要求用文件输入输出，但禁止用重定向的方式，又当如何呢？程序如下：<br> 数据统计（fopen 版）<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; FILE *fin, *fout; </span><br><span class="line"> fin = fopen(<span class="string">&quot;data.in&quot;</span>, <span class="string">&quot;rb&quot;</span>); </span><br><span class="line"> fout = fopen(<span class="string">&quot;data.out&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">  <span class="type">int</span> n, u, d, i, time = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">fscanf</span>(fin,<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;u, &amp;d) !=EOF &amp;&amp; (n!=<span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= u)</span><br><span class="line">      time = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;  <span class="keyword">for</span> (i = <span class="number">1</span>;; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= ((u - d) * i + u))</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      time = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(fout,<span class="string">&quot;%d\n&quot;</span>, time);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fin); </span><br><span class="line">  fclose(fout);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>虽然新内容不少，但也很直观：先声明变量 fin 和 fout（暂且不用考虑 FILE *），把 scanf改成 fscanf，第一个参数为 fin；把 printf 改成 fprintf，第一个参数为 fout，最后执行 fclose，<br>关闭两个文件。<br>提示 ：在算法竞赛中，如果不允许使用重定向方式读写数据，应使用 fopen 和 fscanf/fprintf 进行输入输出。<br>重定向和 fopen 两种方法各有优劣。重定向的方法写起来简单、自然，但是不能同时读写文件和标准输入输出；fopen 的写法稍显繁琐，但是灵活性比较大（例如，可以反复打开并读写文件）。顺便说一句，如果想把 fopen 版的程序改成读写标准输入输出，只需赋值“fin =stdin; fout = stdout;”即可，不要调用 fopen 和 fclose。</p>]]></content>
      
      
      <categories>
          
          <category> 学习相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> ACM训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acm训练1</title>
      <link href="/2023/02/24/acm%E8%AE%AD%E7%BB%831/"/>
      <url>/2023/02/24/acm%E8%AE%AD%E7%BB%831/</url>
      
        <content type="html"><![CDATA[<h2 id="G"><a href="#G" class="headerlink" title="G:"></a>G:</h2><blockquote><p>题目描述<br>Bill and Ted are taking a road trip. But the odometer in their car is broken, so they don’t know how many miles they have driven. Fortunately, Bill has a working stopwatch, so they can record their speed and the total time they have driven. Unfortunately, their record keeping strategy is a little odd, so they need help computing the total distance driven. You are to write a program to do this computation.<br>For example, if their log shows<br>his means they drove 2 hours at 20 miles per hour, then 6-2=4 hours at 30 miles per hour, then 7-6=1 hour at 10 miles per hour. The distance driven is then (2)(20) + (4)(30) + (1)(10) = 40 + 120 + 10 = 170 miles. Note that the total elapsed time is always since the beginning of the trip, not since the previous entry in their log.   </p><p>输入<br>The input consists of one or more data sets. Each set starts with a line containing an integer n, 1 &lt;= n &lt;= 10, followed by n pairs of values, one pair per line. The first value in a pair, s, is the speed in miles per hour and the second value, t, is the total elapsed time. Both s and t are integers, 1 &lt;= s &lt;= 90 and 1 &lt;= t &lt;= 12. The values for t are always in strictly increasing order. A value of -1 for n signals the end of the input.  </p><p>输出<br>For each input set, print the distance driven, followed by a space, followed by the word “miles”  </p><p>样例输入 Copy<br>3<br>20 2<br>30 6<br>10 7<br>2<br>60 1<br>30 5<br>4<br>15 1<br>25 2<br>30 3<br>10 5<br>-1    </p><p>样例输出<br>170 miles<br>180 miles<br>90 miles</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="type">int</span> s, t1 = <span class="number">0</span>,t2 ,sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n != <span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;s, &amp;t2);</span><br><span class="line">      sum += s * (t2 - t1);</span><br><span class="line">      t1 = t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d miles\n&quot;</span>, sum);</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    t1 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-人见人爱A-B"><a href="#I-人见人爱A-B" class="headerlink" title="I: 人见人爱A^B"></a>I: 人见人爱A^B</h2><blockquote><p>题目描述<br>求A^B的最后三位数表示的整数。 说明：A^B的含义是“A的B次方”  </p><p>输入<br>输入数据包含多个测试实例，每个实例占一行，由两个正整数A和B组成（1&lt;=A,B&lt;=10000），如果A=0, B=0，则表示输入数据的结束，不做处理。<br>输出<br>对于每个测试实例，请输出A^B的最后三位表示的整数，每个输出占一行。  </p><p>样例输入<br>2 3<br>12 6<br>6789 10000<br>0 0  </p><p>样例输出<br>8<br>984<br>1  </p></blockquote><p>AC代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> A, B;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;A, &amp;B) != EOF, A || B)</span><br><span class="line">  &#123;</span><br><span class="line">    A %= <span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= B; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      temp = temp * A;</span><br><span class="line">      temp %= <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, temp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="J：校友捐赠"><a href="#J：校友捐赠" class="headerlink" title="J：校友捐赠"></a>J：校友捐赠</h2><blockquote><p>题目描述<br>120年华诞，很多有成就的校友为学校捐款，希望学校能培养出更优秀的学生。学校把这些捐款登记在册，现在需要你帮忙处理这几件事，1 算出总捐款数 2 单人捐款最大金额 3 把捐款按从高到低排个序<br>输入<br>多组测属数据，每组先输入一个整数n表示捐款的人数（假设n不大于120），然后是n个人的捐款额（均为整数）<br>输出<br>对于每组测试数据输出一行，每行n+2个数据，用空格隔开，第一个数为总捐款数 第2个为单人捐款最大金额，后n个是排好序的捐款金额  </p><p>样例输入<br>3 1 2 3<br>4 1 2 3 4  </p><p>样例输出<br>6 3 3 2 1<br>10 4 4 3 2 1  </p></blockquote><p>AC代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FUN</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> t;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; size - <span class="number">1</span> - i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        t = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = t;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n, i, sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> *arr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">    FUN(arr, n);</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      sum = sum + arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d &quot;</span>, sum, arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> ACM训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>memcpy函数（详解）</title>
      <link href="/2023/02/24/memcpy/"/>
      <url>/2023/02/24/memcpy/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>memcpy函数是C/C++语言中的一个用于内存复制的函数，声明在 string.h 中（C++是 cstring）。其原型是：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *destin, <span class="type">void</span> *source, <span class="type">unsigned</span> n)</span>;</span><br></pre></td></tr></table></figure><br>作用是：以source指向的地址为起点，将连续的n个字节数据，复制到以destin指向的地址为起点的内存中。<br>函数有三个参数，第一个是目标地址，第二个是源地址，第三个是数据长度。</p><p>使用memcpy函数时，需要注意：</p><ul><li>数据长度（第三个参数）的单位是字节（1byte = 8bit）。</li><li>注意该函数有一个返回值，类型是void*，是一个指向destin的指针。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *dst, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *psrc;</span><br><span class="line">    <span class="type">char</span> *pdst;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == dst || <span class="literal">NULL</span> == src)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((src &lt; dst) &amp;&amp; (<span class="type">char</span> *)src + size &gt; (<span class="type">char</span> *)dst) <span class="comment">// 出现地址重叠的情况，自后向前拷贝</span></span><br><span class="line">    &#123;</span><br><span class="line">        psrc = (<span class="type">char</span> *)src + size - <span class="number">1</span>;</span><br><span class="line">        pdst = (<span class="type">char</span> *)dst + size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (size--)</span><br><span class="line">        &#123;</span><br><span class="line">            *pdst-- = *psrc--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        psrc = (<span class="type">char</span> *)src;</span><br><span class="line">        pdst = (<span class="type">char</span> *)dst;</span><br><span class="line">        <span class="keyword">while</span> (size--)</span><br><span class="line">        &#123;</span><br><span class="line">            *pdst++ = *psrc++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memcpy函数复制的数据长度"><a href="#memcpy函数复制的数据长度" class="headerlink" title="memcpy函数复制的数据长度"></a>memcpy函数复制的数据长度</h3><p>使用memcpy函数时，特别要注意数据长度。如果复制的数据类型是char，那么数据长度就等于元素的个数。而如果数据类型是其他（如int, double, 自定义结构体等），就要特别注意数据长度的值。<br>好的习惯是，<mark>无论拷贝何种数据类型，都用 n * sizeof(type_name)的写法。</mark><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">10</span>] = <span class="string">&quot;abcdefgh&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> n = <span class="number">2</span>;</span><br><span class="line"><span class="type">void</span> * p = <span class="built_in">memcpy</span>(a+<span class="number">3</span>, a, n);</span><br></pre></td></tr></table></figure><br>以上代码将从a开始的两个字节的数据（即’a’和’b’），复制到从a+3开始的内存（’d’所在的地址）。这样，’d’和’e’被替换。<br>执行结束之后，字符数组（字符串）a的内容变为”abcabfgh”，返回值p即为a的地址（p == a）。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="type">void</span> * p = <span class="built_in">memcpy</span>(a+<span class="number">3</span>, a, n);</span><br></pre></td></tr></table></figure><br>int类型的长度是4个字节。以上代码将从a开始的5个字节的数据复制。5个字节的数据是什么呢？前四个字节组成了一个完整的int（即第一个元素0）。第五个字节，只能取到第二个元素的第1个字节。这里又会涉及到big-endian和little-endian的问题。假设是小端方式储存（更常见），那么读到的是元素1的低8位，写成十六进制即0x1。<br>目标地址是a+3。由于指针加减常数，单位是与类型保持一致的，也就是在a的基础上，增加3倍int长度，对应的是元素3的地址。元素3被替换为0。元素4写成十六进制是0x0004，低8位被替换为0x1，变为0x0001。<br>所以执行结束之后，数组a的内容变为 { 0， 1， 2， 0， 1， 5， 6， 7， 8， 9 }，返回值p即为a的地址（p == a）。<br>根据上面的解释，如果把程序里的n改为6、7、8，那么结果都是一样的。因为数字1和4的二进制表示除了低8位不同，高位都是0。</p><p>倘若高位不相同，那么结果就没那么简单了。还是以int数组为例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(a+<span class="number">3</span>, a, n);</span><br></pre></td></tr></table></figure><br>复制5个字节的数据，前4个字节组成了一个int，即第一个元素0。那么元素3被替换为0。第5个字节从-1中取。-1的十六进制表示为0xFFFF，第5个字节的数据是0xF。元素4变为0x000F，即15。数组a变为 { 0， -1， 2， 0， 15， 5， 6， 7， 8， 9 }。<br>如果 n = 6，那么4变为0x00FF，即255。数组a变为 { 0， -1， 2， 0， 255， 5， 6， 7， 8， 9 }。</p><p>可以看出，如果你想用memcpy复制元素，那么一定要写对数据长度。如果要完整地复制 n 个 int 类型元素，那么写法如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> n = <span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(a+<span class="number">3</span>, a, n);</span><br></pre></td></tr></table></figure><br>数组a变为 { 0， -1， 2， 0， -1， 2， 0， -1， 8， 9 }。<br>如果是其他类型，用法也是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识</title>
      <link href="/2023/02/05/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/02/05/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识"><a href="#Git基础知识" class="headerlink" title="Git基础知识"></a>Git基础知识</h1><h2 id="一、git的基本操作（命令行）"><a href="#一、git的基本操作（命令行）" class="headerlink" title="一、git的基本操作（命令行）"></a>一、git的基本操作（命令行）</h2><h3 id="1-建立仓库"><a href="#1-建立仓库" class="headerlink" title="1.建立仓库"></a>1.建立仓库</h3><p>在根目录输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">```   </span><br><span class="line">在mac、linux中隐藏了.git的文件夹，即本地git仓库。所有提交的内容都会储存在里面。  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 2.添加文件（告诉git需要添加的文件有哪些）</span></span></span><br><span class="line">``` shell</span><br><span class="line">git add 文件名  //单一文件</span><br><span class="line">git add -A //多文件，即将所有新增修改的文件全部上传</span><br><span class="line">```   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 3.提交到本地仓库</span></span>  </span><br><span class="line">``` shell</span><br><span class="line">git commit -m &quot;初次提交/更新图片&quot; //&quot;&quot;内内容自定义，用来标识操作</span><br></pre></td></tr></table></figure></p><h3 id="4-建立本地仓库与github的联系"><a href="#4-建立本地仓库与github的联系" class="headerlink" title="4.建立本地仓库与github的联系"></a>4.建立本地仓库与github的联系</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/用户名/仓库名.git //github生成htttps链接</span><br><span class="line">```   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 5.上传到仓库</span></span></span><br><span class="line">``` shell</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>git push 到远程仓库的master（主分支）上。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info: please complete authentication in your browser...</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 222 bytes | 222.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">To https://github.com/Hao-star123/git_learn.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">branch &#x27;master&#x27; set up to track &#x27;origin/master&#x27;.  </span><br></pre></td></tr></table></figure><br>第一次使用github会弹出登录界面</p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><h3 id="1-下载仓库代码（pull"><a href="#1-下载仓库代码（pull" class="headerlink" title="1.下载仓库代码（pull)"></a>1.下载仓库代码（pull)</h3><p>当线上版本更新，下载时可以使用拉取命令,将文件下载到本地进行更新。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h3 id="2-下载仓库代码-git-clone"><a href="#2-下载仓库代码-git-clone" class="headerlink" title="2.下载仓库代码(git clone)"></a>2.下载仓库代码(git clone)</h3><pre><code class="lang-shell">git clone https://github.com/用户名/仓库名.git</code></pre><h3 id="3-ssh秘钥"><a href="#3-ssh秘钥" class="headerlink" title="3.ssh秘钥"></a>3.ssh秘钥</h3><p>秘钥分为私钥（存放在本地，类似于门禁卡）和公钥（github,类似于装门禁的门）  </p><h4 id="1-生成秘钥"><a href="#1-生成秘钥" class="headerlink" title="1.生成秘钥"></a>1.生成秘钥</h4><pre><code class="lang-shell">ssh-keygen</code></pre><p>秘钥位置：</p><ol><li>mocOS<ul><li>~/.ssh</li></ul></li><li>Windows<ul><li>C:/用户/（你的）用户名/.ssh  <blockquote><p>生成文件id_rsa是私钥<br>id_rsa.pub是公钥  </p></blockquote></li></ul></li></ol><p>用记事本打开公钥，复制公钥  </p><h4 id="2-配置ssh到github"><a href="#2-配置ssh到github" class="headerlink" title="2.配置ssh到github"></a>2.配置ssh到github</h4><p>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起，公钥填到Key那一栏。<br>配置成功后，可使用ssh方式连接github  </p><pre><code class="lang-shell">git clone git@github.com:用户名/仓库名.git</code></pre><h4 id="2-注"><a href="#2-注" class="headerlink" title="2.注"></a>2.注</h4><p>仓库setting内的Deploy keys，是添加部署秘钥的。填写服务器生成的秘钥，不是本地开发电脑生成的秘钥。在项目上线时，在服务器上执行git clone命令时会使用的秘钥。在服务器用来运行完善代码，而非开发，因此无需要勾选 Allow write access 的写权限，主要知识在linux服务器中。</p><h2 id="htttps和ssh"><a href="#htttps和ssh" class="headerlink" title="htttps和ssh"></a>htttps和ssh</h2><p>ssh添加成功后git操作将不需要登录验证，更加方便。  </p><h3 id="4-添加合作用户"><a href="#4-添加合作用户" class="headerlink" title="4.添加合作用户"></a>4.添加合作用户</h3><p>在仓库settings左侧的Collaborators，单击Manage access中的add people按钮，输入github的用户名或者邮箱，他会收到github的邀请邮件，确认后拥有该仓库的操作权限<br /> <br /></p><h1 id="二、git的基本操作（客户端）"><a href="#二、git的基本操作（客户端）" class="headerlink" title="二、git的基本操作（客户端）"></a>二、git的基本操作（客户端）</h1><p>更新操作会显示</p>]]></content>
      
      
      <categories>
          
          <category> 学习相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/01/hello-world/"/>
      <url>/2023/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C指针与地址</title>
      <link href="/2023/01/29/C%E6%8C%87%E9%92%88%E4%B8%8E%E5%9C%B0%E5%9D%80/"/>
      <url>/2023/01/29/C%E6%8C%87%E9%92%88%E4%B8%8E%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="C指针与地址"><a href="#C指针与地址" class="headerlink" title="C指针与地址"></a>C指针与地址</h1><blockquote><p>在C语言的学习过程中，常理不清指针（即一个变量的地址）和指针变量（专门用来存放另一变量的地址(指针)的变量）的关系，因此通过程序打印地址运行结果，来分析加强理解。以此记录学习过程中的心得，希望能帮到大家，感谢指正。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="一、代码示例"><a href="#一、代码示例" class="headerlink" title="一、代码示例"></a>一、代码示例</h3><p> 代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">88</span>,b=<span class="number">60</span> ;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p=&amp;a;<span class="comment">//指向a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#p&quot;</span>,p);<span class="comment">//以十六进制的形式输出</span></span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot; %p &quot;</span>,*p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %p\n&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot; %d &quot;</span>,*p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %d\n&quot;</span>,&amp;p);</span><br><span class="line">    p--;<span class="comment">//指针移动指向b的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#p&quot;</span>,p);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot; %p &quot;</span>,*p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %p\n&quot;</span>,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot; %d &quot;</span>,*p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %d\n&quot;</span>,&amp;p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="2.运行结果"></a>2.运行结果</h3><p>代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000000000061F</span>E1C</span><br><span class="line"><span class="number">0X000000000061FE1C</span> <span class="number">0000000000000058</span>  <span class="number">000000000061F</span>E10</span><br><span class="line"><span class="number">6422044</span> <span class="number">88</span>  <span class="number">6422032</span></span><br><span class="line"><span class="number">000000000061F</span>E18</span><br><span class="line"><span class="number">0X000000000061FE18</span> <span class="number">000000000000003</span>C  <span class="number">000000000061F</span>E10</span><br><span class="line"><span class="number">6422040</span> <span class="number">60</span>  <span class="number">6422032</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在指针<em>p=&amp;a初始化后，p等同于&amp;a即a的地址，在运行过程中可以代换。%#p是输出位0X开开头的16进制数。因此printf(“%p\n”,&amp;a);    printf(“%#p”,p);本质是一样的。</em>p则是通过指针变量p存储的a的地址，间接获取a的值。<em>p=a,对数值%p等同于对数值以十六进制位输出。%d对p,</em>p,&amp;p则是以十进制形式分别输出地址，值，地址。    </p></blockquote><p>p—，由于p是整型指针，p—减去int的4个字节刚好移动到b。  </p><blockquote><p>【注】1.这里发现后定义的变量b的地址要小于a的地址，这是因为c语言中，先定义的数据先入栈，在栈的底部（不分配内存），声明结束后，b在栈顶，所以b先出栈，先为b分配内存。因此b的地址小于a的地址。<br>&emsp;&emsp;&emsp;2.数据的地址位数和数据能存储的位数无关。学习阶段曾存在疑问（输出的地址是16位，int是4字节，即16进制的4位代表一个字节（实际应该是一个字节等于2位16进制），一个字节等于八位二进制，但八位二进制不等于四位16进制？）通过交流请教得知有关计算机组成原理，地址位数只取决于系统，所有类型的指针所占长度相同。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法入门</title>
      <link href="/2023/01/29/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>/2023/01/29/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实验A1：表达式<span class="number">11111</span>*<span class="number">11111</span>的值是多少？把<span class="number">5</span>个<span class="number">1</span>改成<span class="number">6</span>个<span class="number">1</span>呢？<span class="number">9</span>个<span class="number">1</span>呢？</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">11111</span>*<span class="number">11111</span>);  <span class="comment">//正常数字123454321</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">111111</span>*<span class="number">111111</span>); <span class="comment">//数据太大溢出，为负值-539247567</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">111111111</span>*<span class="number">111111111</span>); <span class="comment">//结果是整数，但是数值错误1653732529</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">实验A2：把实验A1中的所有数换成浮点数，结果如何  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,<span class="number">11111.0</span>*<span class="number">11111.0</span>);<span class="comment">//123454321.000000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,<span class="number">111111.0</span>*<span class="number">111111.0</span>);<span class="comment">//12345654321.000000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,<span class="number">111111111.0</span>*<span class="number">111111111.0</span>);<span class="comment">//12345678987654320.000000</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*又改成%d</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,11111.0*11111.0);//123454321.000000</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,111111.0*111111.0);//12345654321.000000</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,111111111.0*111111111.0);//12345678987654320.000000</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/zhaojunwuiris/article/details/83654072">#INF00：出现此报错说明是数值溢出，或者说是除数为0</a>  </p></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>#IND</td><td>这个的情况更复杂，一般来说，它们来自于任何未定义结果（非法）的浮点数运算。”IND”是 indeterminate（不确定） 的缩写，而”nan”是 not a number 的缩写。IND表示NAN, 比如 0/0  log( -1 ) 等等。IND是Windows上的说法，NaN是Linux上的说法，含义是一样的。产生这个值的常见例子有：对负数开平方，对负数取对数，0.0/0.0，0.0*∞, ∞/∞ 等。也可能由于一些操作使得程序中产生了无效数字或者没有给成员变量赋值，使用类似于pow, exp等等函数时常会产生一个无效数字1.#IND00（-1.#IND00 对应符号位 1 , 阶码全1 , 尾数非0 ）。</td></tr><tr><td>#INF</td><td>这个值表示“无穷大inf (infinity 的缩写)”，即超出了计算机可以表示的浮点数的最大范围（或者说超过了 double 类型的最大值）。一般来说是除数为0得出的结果，例如，当一个整数除以0时便会得到一个1.#INF / inf值；相应的，如果一个负整数除以0会得到 -1.#INF / -inf 值。</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">实验A3：表达式<span class="built_in">sqrt</span>(<span class="number">-10</span>)的值是多少？尝试用各种方式输出。在计算过程中系统会报错吗？  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,<span class="built_in">sqrt</span>(<span class="number">-10</span>));<span class="comment">//-1.#IND00</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sqrt</span>(<span class="number">-10</span>));<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>,<span class="built_in">sqrt</span>(<span class="number">-10</span>));<span class="comment">//-1.#IND000000</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">实验A4：表达式<span class="number">1.0</span>/<span class="number">0.0</span>,<span class="number">0.0</span>/<span class="number">0.0</span>的值是多少？尝试用各种方式输出。在计算过程中会报错吗？  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,<span class="number">1.0</span>/<span class="number">0.0</span>);<span class="comment">//1.#INF00</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,<span class="number">1.0</span>/<span class="number">0.0</span>);<span class="comment">//1.#J</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>,<span class="number">1.0</span>/<span class="number">0.0</span>);<span class="comment">//1.#INF000000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,<span class="number">0.0</span>/<span class="number">0.0</span>);<span class="comment">//-1.#IND00</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,<span class="number">0.0</span>/<span class="number">0.0</span>);<span class="comment">//-1.#J</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">用程序实验测试<span class="type">int</span>整数的最小值和最大值（精确值）</span><br><span class="line"><span class="comment">//决定int最大值的主要原因:根据编译器类型不同而变化。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;    </span><br><span class="line"> <span class="comment">/*int n = 0, i = 0;</span></span><br><span class="line"><span class="comment"> while (n &gt;= i)</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment">   n = i;</span></span><br><span class="line"><span class="comment">   i--;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> printf(&quot;%d&quot;, n);*/</span>   <span class="comment">//-2147483648(最小值)</span></span><br><span class="line"> </span><br><span class="line"> <span class="type">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (n &lt;= i) &#123;</span><br><span class="line">   n = i;</span><br><span class="line">   i++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n);     <span class="comment">//2147483647（最大值）</span></span><br><span class="line"> system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7744 问题（1）函数 floor(x)返回不超过 x 的最大整数。floor(小数不能是整数)</span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123; </span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">9</span>; a++) </span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++) </span><br><span class="line"> &#123; </span><br><span class="line"> <span class="type">int</span> n = a*<span class="number">1100</span> + b*<span class="number">11</span>; <span class="comment">//这里才开始使用 n，因此在这里定义 n</span></span><br><span class="line"> <span class="type">int</span> m = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n) + <span class="number">0.5</span>); </span><br><span class="line"> <span class="keyword">if</span>(m*m == n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*读者可能会问：可不可以这样写？if(sqrt(n) == floor(sqrt(n))) printf(&quot;%d\n&quot;, n)，即直接判</span></span><br><span class="line"><span class="comment">断 sqrt(n)是否为整数。理论上当然没问题，但这样写不保险，因为浮点数的运算（和函数）</span></span><br><span class="line"><span class="comment">有可能存在误差。</span></span><br><span class="line"><span class="comment">假设在经过大量计算后，由于误差的影响，整数 1 变成了 0.9999999999，floor 的结果</span></span><br><span class="line"><span class="comment">会是 0 而不是 1。为了减小误差的影响，一般改成四舍五入，即 floor(x+0.5)①。如果难以理</span></span><br><span class="line"><span class="comment">解，可以想象成在数轴上把一个单位区间往左移动 0.5 个单位的距离。floor(x)等于 1 的区间</span></span><br><span class="line"><span class="comment">为[1,2)，而 floor(x+0.5)等于 1 的区间为[0.5, 1.5)。</span></span><br><span class="line"><span class="comment">提示 2-7：浮点运算可能存在误差。在进行浮点数比较时，应考虑到浮点误差。*/</span></span><br></pre></td></tr></table></figure><blockquote><p>数学定理：要计算只包含加法、减法和乘法的整数表达式除以正整数 n 的余数，可以在每步计算之后对 n 取余，结果不变<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*p31 程序 2-11 数据统计（fopen 版），如果想把 fopen 版的程序改成读写标准输入输出，只需赋值“fin =stdin; fout =stdout;”即可，不要调用 fopen 和 fclose①。*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1000000000 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123; </span><br><span class="line"> FILE *fin, *fout; </span><br><span class="line"> fin = fopen(<span class="string">&quot;data.in&quot;</span>, <span class="string">&quot;rb&quot;</span>); </span><br><span class="line"> fout = fopen(<span class="string">&quot;data.out&quot;</span>, <span class="string">&quot;wb&quot;</span>); </span><br><span class="line"> <span class="type">int</span> x, n = <span class="number">0</span>, min = INF, max = -INF, s = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fin, <span class="string">&quot;%d&quot;</span>, &amp;x) == <span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line"> s += x; </span><br><span class="line"> <span class="keyword">if</span>(x &lt; min) min = x; </span><br><span class="line"> <span class="keyword">if</span>(x &gt; max) max = x; </span><br><span class="line"> n++; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="built_in">fprintf</span>(fout, <span class="string">&quot;%d %d %.3f\n&quot;</span>, min, max, (<span class="type">double</span>)s/n); </span><br><span class="line"> fclose(fin); </span><br><span class="line"> fclose(fout); </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Time used = %.2f\n&quot;</span>, (<span class="type">double</span>)clock() / CLOCKS_PER_SEC);</span><br></pre></td></tr></table></figure><p>由于函数内会被系统动态分配内存比较小，所以只有数组定义放在main函数外面时，数组 a 才可以开得很大；放在 main 函数内时，数组稍大就会异常退出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法入门 </tag>
            
            <tag> 总结整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针知识框架（详解）</title>
      <link href="/2023/01/29/%E6%8C%87%E9%92%88%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
      <url>/2023/01/29/%E6%8C%87%E9%92%88%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="指针知识框架（详解）"><a href="#指针知识框架（详解）" class="headerlink" title="指针知识框架（详解）"></a>指针知识框架（详解）</h1><blockquote><p>本文为C语言学习过程中关于指针的笔记。根据书籍和程序题并参考网络上的博客回答，撰写的感悟和收获。<br>文章参考：<br>C语言解惑指针、数组、函数和多文件编程（作者刘振安刘燕君，机械工业出版社）</p></blockquote><h2 id="一、对指针使用const限定符"><a href="#一、对指针使用const限定符" class="headerlink" title="一、对指针使用const限定符"></a>一、对指针使用const限定符</h2><h3 id="1-指向常量的指针"><a href="#1-指向常量的指针" class="headerlink" title="1.指向常量的指针"></a>1.指向常量的指针</h3><blockquote><p>const int  y=66;<br>const int <em>p=&y; //此时y和</em>p都不能做为左值，但可以作为右值。</p></blockquote><p>使指针指向一个不可修改的常量，即<em>p是常量。但是可以通过修改p指向的地址，改变</em>p的值。<br>例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">const</span> <span class="type">int</span> y=<span class="number">66</span>;</span><br><span class="line"> <span class="type">int</span> x=<span class="number">50</span>;</span><br><span class="line"> <span class="type">const</span> <span class="type">int</span> * p =&amp;y;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%p\n&quot;</span>,y,*p,p);</span><br><span class="line"> p=&amp;x;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%p\n&quot;</span>,x,*p,p);</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment">  66,66,000000000062FE14</span></span><br><span class="line"><span class="comment">  50,50,000000000062FE10*/</span></span><br></pre></td></tr></table></figure><br> 由指向y改为指向x,*p被覆盖。 </p><h3 id="2-指向常量的指针指向非常量"><a href="#2-指向常量的指针指向非常量" class="headerlink" title="2.指向常量的指针指向非常量"></a>2.指向常量的指针指向非常量</h3><p>示例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">55</span> ;<span class="comment">//变量x能作为左值和右值</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> y=<span class="number">88</span>;<span class="comment">//常量y不能作为左值，但可以作为右值</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *p;<span class="comment">//声明指向常量的指针</span></span><br><span class="line">    <span class="type">int</span> *p1 ;<span class="comment">//声明指针</span></span><br><span class="line">    p=&amp;y ;<span class="comment">//用常量初始化指向常量的指针，*p不能作为左值</span></span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>,*p) ;</span><br><span class="line">    p=&amp;x;<span class="comment">//p作为左值，使常量指针改为指向变量x,*p不能作为左值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*p) ;</span><br><span class="line">    x=<span class="number">128</span> ;<span class="comment">//用x作为左值间接改变*p的值，使*p=x=128</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *p) ;</span><br><span class="line">    p1=(<span class="type">int</span>*)&amp;y;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p1) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>示例中指向常量的指针p指向变量x,仅限制直接使用<em>p作为左值，但可以通过直接修改x的值改变</em>p的值。同时也与使用非常量指针一样，也可以直接使用“&amp;”改变常量指针的指向，显然也改变了*p的值。</p><blockquote><p>【注】常量只能由指向常量的指针（即const void<em>p）指向，否则必须进行强制转换，将常量强制转换为相应的指针类型。如示例：p1=(int</em>)&y;</p></blockquote><h3 id="3-常量指针"><a href="#3-常量指针" class="headerlink" title="3.常量指针"></a>3.常量指针</h3><p>限定符const放在*号右边，是指针本身成为一个const指针。声明常量时必须进行初始化，即指针变量p存储的为常量地址。</p><blockquote><p>例如:int x=45;<br>int <em> const p=&amp;x//p始终指向x的地址。但可以修改x地址内存的值，x=123和</em>p=123；但p指向的地址不能改变</p><h3 id="4-指向常量的常量指针"><a href="#4-指向常量的常量指针" class="headerlink" title="4.指向常量的常量指针"></a>4.指向常量的常量指针</h3><p>即指针和指向的对象都不能改动的“指向常量的常量指针”。<em>p和p都是常量。限制了“&amp;”和“</em>”运算符，很少使用。</p><h3 id="5-void指针"><a href="#5-void指针" class="headerlink" title="5.void指针"></a>5.void指针</h3><p>void类型不能声明变量，但可以声明void类型的指针，而void型指针可以指向任何类型的变量。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">256</span>, y=<span class="number">386</span>,*p=&amp;x;</span><br><span class="line">    <span class="type">void</span>*vp=&amp;x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>,vp,p,x);</span><br><span class="line">    vp=&amp;y;</span><br><span class="line">    p=(<span class="type">int</span>*)vp;<span class="comment">//虽然void指针指向整型变量对象x，但不能使用*vp应用整型对象的值。要引用这个值，必须强制将void指针赋值给与值相对应的指针类型。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>,vp,p,*p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>【注】但奇怪的是，测试时发现p=(int<em>)vp不加（int</em>）也可以正常运行。  </p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>const放在<em>的右边（void </em> const p）,修饰的是指针（即指针变量p指向的地址）不可改变。<br>const放在前端（const void <em> p）,修饰的是指向的对象（指针变量p存储的地址的值）,即</em>p是常量</p><h2 id="二、指针与数组"><a href="#二、指针与数组" class="headerlink" title="二、指针与数组"></a>二、指针与数组</h2><h3 id="1-数组与指针的关系"><a href="#1-数组与指针的关系" class="headerlink" title="1.数组与指针的关系"></a>1.数组与指针的关系</h3><p>指向数组的指针实际上指的是能够指向数组众人一个元素的指针。<br>int a[5];<br>int <em>pa=&amp;a[0];//等同于int </em>pa;<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;  pa=a;  </p></blockquote><p>数组名和指针的区别：指针是变量：pa=a或pa++是有意义的；<br>      数组名是指针常量：a=pa、a++、pa=&amp;a（a本身就是地址，无法对地址取地址）是非法操作。<br>假设指针现在指向a[0],则数组的第i个（下标为i）元素可表示为a[i]或<em>（pa+i）,还可使用带下标的指针pa,即pa[i]和</em>（pa+i）的含义一样。若将a[i]的值修改，下列语句等价。  </p><blockquote><p>a[i]=123; <em>(a+4)=123; </em>(pa+4)=123; pa[4]=123;  </p></blockquote><p><em><center>指针与数组元素的关系</center></em>    </p><div class="table-container"><table><thead><tr><th>下标</th><th>数组名</th><th>指针</th><th>指针下标</th><th>四者的逻辑关系</th></tr></thead><tbody><tr><td>a[0]</td><td>a</td><td>pa</td><td>pa[0]</td><td>a[0]==<em>a==</em>pa==pa[0]</td></tr><tr><td>a[1]</td><td>a+1</td><td>pa+1</td><td>pa[1]</td><td>a[1]==<em>(a+1)==</em>(pa+1)==pa[1]</td></tr><tr><td>a[2]</td><td>a+2</td><td>pa+2</td><td>pa[2]</td><td>a[2]==<em>(a+2)==</em>(pa+2)==pa[2]</td></tr></tbody></table></div><h2 id="2-指针数组和数组指针"><a href="#2-指针数组和数组指针" class="headerlink" title="2.指针数组和数组指针"></a>2.指针数组和数组指针</h2><blockquote><p>数组的指针：是一个指针，什么样的指针呢？指向数组的指针。<br>指针的数组：是一个数组，什么样的数组呢？装着指针的数组。<br>本质是的后面是类型。<br>然后，需要明确一个优先级顺序：()&gt;[]&gt;<em>，所以：<br>(</em>p)[n]：根据优先级，先看括号内，则p是一个指针，这个指针指向一个一维数组，数组长度为n，这是“数组的指针”，即数组指针；<br><em>p[n]：根据优先级，先看[]，则p是一个数组，再结合</em>，这个数组的元素是指针类型，共n个元素，这是“指针的数组”，即指针数组。<br>根据上面两个分析，可以看出，p是什么，则词组的中心词就是什么，即数组“指针”和指针“数组”。  <br>————数组指针和指针数组<em>mick_hu的博客-CSDN博客</em>数组指针和指针数组<a href="https://blog.csdn.net/mick_hu/article/details/100931034?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166954491916782428658613%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166954491916782428658613&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-100931034-null-null.142%5Ev66%5Econtrol,201%5Ev3%5Econtrol_2,213%5Ev2%5Et3_esquery_v2&amp;utm_term=%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%92%8C%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88&amp;spm=1018.2226.3001.4187">原文地址</a>  </p><h2 id="3-c语言优先级"><a href="#3-c语言优先级" class="headerlink" title="3. c语言优先级"></a>3. c语言优先级</h2><p>C语言运算符优先级（超详细）_embed_huang的博客-CSDN博客_c语言运算符优先级构成一系列表达式（六个左右），然后分析并打印输出他的结果<a href="https://blog.csdn.net/huangblog/article/details/8271791?spm=1001.2014.3001.5506">原文地址</a>  </p></blockquote><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 学习相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A. Watermelon</title>
      <link href="/2023/01/28/A-Watermelon/"/>
      <url>/2023/01/28/A-Watermelon/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Watermelon-（水题）"><a href="#A-Watermelon-（水题）" class="headerlink" title="A. Watermelon  （水题）"></a>A. Watermelon  （水题）</h1><p><em><center>time limit per test1 second  memory limit per test64 megabytes  inputstandard input  outputstandard output</center></em>   </p><blockquote><p>One hot summer day Pete and his friend Billy decided to buy a watermelon. They chose the biggest and the ripest one, in their opinion. After that the watermelon was weighed, and the scales showed w kilos. They rushed home, dying of thirst, and decided to divide the berry, however they faced a hard problem.</p><p>Pete and Billy are great fans of even numbers, that’s why they want to divide the watermelon in such a way that each of the two parts weighs even number of kilos, at the same time it is not obligatory that the parts are equal. The boys are extremely tired and want to start their meal as soon as possible, that’s why you should help them and find out, if they can divide the watermelon in the way they want. For sure, each of them should get a part of positive weight.</p></blockquote><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>The first (and the only) input line contains integer number w (1 ≤ w ≤ 100) — the weight of the watermelon bought by the boys.</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>Print YES, if the boys can divide the watermelon into two parts, each of them weighing even number of kilos; and NO in the opposite case.</p><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><ol><li><p>input：</p><ul><li>8</li></ul></li><li><p>output：</p><ul><li>YES</li></ul></li></ol><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>For example, the boys can divide the watermelon into two parts of 2 and 6 kilos respectively (another variant — two parts of 4 and 4 kilos).  </p><blockquote><p>AC代码<br>首次：没有考虑到该点，写的较为复杂。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> w;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;(w/<span class="number">2</span>+<span class="number">1</span>);i=i+<span class="number">2</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(w==(i+(w-i))&amp;&amp;((w-i)%<span class="number">2</span>==<span class="number">0</span>))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>公认：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w);</span><br><span class="line">    <span class="keyword">if</span> (w == <span class="number">2</span> || w % <span class="number">2</span> != <span class="number">0</span>)<span class="comment">//因为除了2，所有偶数一定可以由两个偶数组成。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言逆序后四位</title>
      <link href="/2022/10/20/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%80%86%E5%BA%8F%E5%90%8E%E5%9B%9B%E4%BD%8D/"/>
      <url>/2022/10/20/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%80%86%E5%BA%8F%E5%90%8E%E5%9B%9B%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言逆序后四位"><a href="#C语言逆序后四位" class="headerlink" title="C语言逆序后四位"></a>C语言逆序后四位</h1><p>作业练习一题，尝试将输入数据各位转入数组。代码前段来源——<a href="https://blog.csdn.net/qq_43467892/article/details/108874177?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166626062916800186574482%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=166626062916800186574482&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-14-108874177-null-null.142%5Ev59%5Enew_blog_pos_by_title,201%5Ev3%5Econtrol_2&amp;utm_term=c%E8%AF%AD%E8%A8%80%E5%B0%86%E5%AD%97%E7%AC%A6%E5%88%9B%E5%AD%98%E5%85%A5%E6%95%B0%E7%BB%84&amp;spm=1018.2226.3001.4187">进阶版老黑：</a></p><blockquote><p>任务描述:<br>程序每次读入一个至少4位数的正整数，然后输出其后4位按位逆序的数字。注意：当输入的数字含有结尾的0时，输出不应带有前导的0。比如输入57000，输出应该是7。<br>输入格式:<br>每个测试是一个正整数。<br>输出格式:<br>输出逆序的数。<br>输入样例1: 34500<br>输出样例1: 54<br>输入样例2: 34567<br>输出样例2: 7654</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(c))</span><br><span class="line">&#123;</span><br><span class="line">ungetc(c, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;a[n++]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">for</span> (i = n<span class="number">-1</span>; i &gt;=n<span class="number">-4</span>; i--)</span><br><span class="line">     &#123;  <span class="keyword">if</span> (a[i]!=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C练习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
